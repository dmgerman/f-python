* Functional python: map and filter
- Part of the Functional Python series
  http://github.com/dmgerman/f-python/

- Video:
  - https://youtu.be/TCqVRNEfU9o


* Introduction

- *map* and *filter* are the workhorses of functional programming

- Many programs are about processing collections of objects
  - that are transformed into other collections

- Code for this video:
  [[http://github.com/dmgerman/f-python/]]
  

* map/filter are built-in operations in python

  https://docs.python.org/3/library/functions.html

- Provide *easy* and *efficient* stream processing

* Syntax: 

- *map* takes a function *f* and a stream *st* and
  generates a stream applying *f* to
  each element of the stream

#+begin_src python   :exports both
map(f, st)
#+end_src

- *filter* takes a function *f* and a stream *st* and
  filters out elements of the
  stream for which calling *f* is false

#+begin_src python   :exports both
filter(f, st)
#+end_src

* Example:

For all even numbers between 0 and 9 that are even,
  print the number and its square.

#+begin_src python   :exports both :results output
print(
    list(
        (map(lambda x: (x, x*x),
             filter(lambda x: x%2==0,
                    range(10))))))
#+end_src

#+RESULTS:
#+begin_example
[(0, 0), (2, 4), (4, 16), (6, 36), (8, 64)]
#+end_example

* My preferred way to write this type of code

- Avoid anonymous functions
- if the function is *very* trivial, create a lambda,
  - otherwise give it a name
- one operation per line
- I /"shadow"/ the previous value of the stream

#+begin_src python   :exports both :results output
def pair_with_square(x):
    return (x, x*x)

def is_even(x):
    return (x % 2 == 0)

def even_and_pair_with_square(stream):
  result = filter(is_even, stream)
  result = map(pair_with_square, result)
  return result

result = list(even_and_pair_with_square(range(10)))

print(result)
#+end_src

#+RESULTS:
#+begin_example
[(0, 0), (2, 4), (4, 16), (6, 36), (8, 64)]
#+end_example


* Map and filter are lazy!

- what if I *don't call list()*?
  - no data is processed
#+begin_src python   :exports both :results output
def pair_with_square(x):
    return (x, x*x)

def is_even(x):
    return (x % 2 == 0)

def even_and_pair_with_square(data):
  result = filter(is_even, data)
  result = map(pair_with_square, result)
  return result

result = even_and_pair_with_square(range(10))
print("Result: ", result)

print("first:  ", next(result))
print("second: ", next(result))
#+end_src

#+RESULTS:
#+begin_example
Result:  <map object at 0x104a9c790>
first:   (0, 0)
second:  (2, 4)
#+end_example


* lazy evaluation: like a production line!

- map and filter set each a
  *processing station*
- data is only processed when needed
  - *lazy evaluation!*

#+begin_src python   :exports both :results output
def pair_with_square(x):
    print("Inside pair_with_square: ", x)
    return (x, x*x)

def is_even(x):
    print("Inside even: ", x)
    return (x % 2 == 0)

def even_and_pair_with_square(data):
  result = filter(is_even, data)
  result = map(pair_with_square, result)
  return result

# note that range coult generate a lot of values
result = even_and_pair_with_square(range(10000000000000000))

print("Give me one:")
# processing of the stream starts here
print(next(result))
print("Give me another")
print(next(result))
print("Give me another one")
print(next(result))
#+end_src

#+RESULTS:
#+begin_example
Give me one:
Inside even:  0
Inside pair_with_square:  0
(0, 0)
Give me another
Inside even:  1
Inside even:  2
Inside pair_with_square:  2
(2, 4)
Give me another one
Inside even:  3
Inside even:  4
Inside pair_with_square:  4
(4, 16)
#+end_example

* use islice to process a given number of elements

- itertools.islice returns a stream of finite size

#+begin_src python   :exports both :results output
import itertools 

def pair_with_square(x):
    print("Inside pair_with_square: ", x)
    return (x, x*x)

def is_even(x):
    print("Inside even: ", x)
    return (x % 2 == 0)

def even_and_pair_with_square(data, n=None):
  result = filter(is_even, data)
  result = map(pair_with_square, result)
  result = itertools.islice(result, n)
  return result

# get me 4 only
result = even_and_pair_with_square(range(1000000000000), n=4)

result = list(result)
print("Result: ", result)
#+end_src

#+RESULTS:
#+begin_example
Inside even:  0
Inside pair_with_square:  0
Inside even:  1
Inside even:  2
Inside pair_with_square:  2
Inside even:  3
Inside even:  4
Inside pair_with_square:  4
Inside even:  5
Inside even:  6
Inside pair_with_square:  6
Result:  [(0, 0), (2, 4), (4, 16), (6, 36)]
#+end_example

* Let us put everything together

- Assume we have 2 csv files:
  - orders.csv:    orderid, customerid, date, amount
  - customers.csv: customerid, cname, contact, country

- we want to compute a join, equivalent to:

  #+begin_src sql   :exports both
  select orderid, date, country from
    orders join customers using (customerid)
    where country = 'Germany'
  #+end_src

* A join is syntactic sugar

- We can rewrite the query as a cross product

  #+begin_src sql   :exports both
  with joined as
      (select *
       from orders, customers
       where orders.customerid = customers.customerid)
  select orderid, date, country
    from joined
    where country = 'Germany'
  #+end_src

* in python: 

- We can use the query as a *blueprint* for our
  implementation

  #+begin_src sql   :exports both
  select orderid, date, country from
      (select orderid, orders.customerid, date, amount,
              cname, contact, country 
       from orders, customers
       where orders.customerid = customers.customerid)
    where country = 'Germany'
  #+end_src

- we follow the same logic as the query
  1. cross product the orders to the customers
  2. (join) we match orders to customers using ~custumerid~
  3. keep the tuples that have country == 'Germany'
  4. project only orderid, date, country

#+begin_src python   :exports both :results output
import csv
import collections
import itertools

Order     = collections.namedtuple('Orders',    'orderid cid date amount')
Customer  = collections.namedtuple('Customers', 'cid cname contact country')
# for cross product result
Ord_Cust  = collections.namedtuple('Ord_Cust',
                                   'orderid cid date amount cid2 cname contact country')

with open('orders.csv') as forders, open('customers.csv') as fcustomers:
    # get data
    orders = csv.reader(forders, delimiter=',')
    orders = map(lambda x: Order(*x), orders)

    customers = csv.reader(fcustomers, delimiter=',')
    customers = map(lambda x: Customer(*x), customers)

    # compute the cross product 
    cross = itertools.product(orders, customers)
    cross = map(lambda x: Ord_Cust(*x[0],*x[1]), cross)

    # at this point result is a stream of Ord_Cust

    # do join
    joined = filter(lambda x: x.cid == x.cid2, cross)

    # do selection
    result = filter(lambda x: x.country == 'Germany', joined)
    # do projection
    result = map(lambda x: "Order: %s Date: %s Country: %s"%
                 (x.orderid, x.date, x.country), result)
    result = map(print, result)
    # consume the stream
    # convert to alist to process map
    #   we'll address this in a future video
    list(result)
#+end_src

#+RESULTS:
#+begin_example
Order: 10309 Date: 1996-09-19 Country: Germany
Order: 10310 Date: 1996-09-20 Country: Germany
#+end_example


* Conclusions

- *map* and *filter* are the foundation of functional programming

- they are *lazy*!

- allow for *elegant, simple code* to do
  *complex processing* of collections of
  data structures

- Code for this video:
  [[http://github.com/dmgerman/f-python/]]

- More on map and filter:
  https://docs.python.org/3/library/functions.html

- More on itertools:
  https://docs.python.org/3/library/itertools.html  

