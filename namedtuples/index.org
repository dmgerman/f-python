* Functional python: records/named tuples

- How to easily define records

- documentation:
  https://docs.python.org/3/library/collections.html#collections.namedtuple

- code for this video at:
  http://github.com/dmgerman/f-python/namedtuples

* Using tuples is error prone
- e.g. reading a csv file as a tuple

#+begin_src python   :exports both :results output
import csv
with open("orders.csv") as f:
    orders = csv.reader(f, delimiter=',')
    for o in orders:
        print(o)
        print('  The order id is ', o[0], ' and the date is', o[2])
#+end_src

#+RESULTS:
#+begin_example
['10309', '1', '1996-09-19', '210']
  The order id is  10309  and the date is 1996-09-19
['10308', '2', '1996-09-18', '43']
  The order id is  10308  and the date is 1996-09-18
#+end_example

- when we store data in a tuple:
  - we *must* remember which position stores what
  - very *error prone*

- instead, use records
  - called *namedtuples* in python
  - use *.field* name to access to attributes of tuple

* Example

- Use MyRecord, instead of a pair

#+begin_src python   :exports both :results output
import collections
import csv

Order = collections.namedtuple("Orders", "id customerid date total")

with open("orders.csv") as f:
    orders = csv.reader(f, delimiter=',')
    for o in orders:
        o = Order(*o) # equivalent to Order(o[0],o[1],o[2],o[3])
        print(o)
        print('  The order id is ', o.id, ' and the date is', o.date)
#+end_src

#+RESULTS:
#+begin_example
Orders(id='10309', customerid='1', date='1996-09-19', total='210')
  The order id is  10309  and the date is 1996-09-19
Orders(id='10308', customerid='2', date='1996-09-18', total='43')
  The order id is  10308  and the date is 1996-09-18
#+end_example

* Syntax

#+begin_src python   :exports both :results output
import collections

MyRecord = collections.namedtuple("MyRecord", "f1 f2")

# creating a MyRecord
a = MyRecord(10, "abc")

print("Value:   ", a)
print("Type:    ",type(a))

# how to access its fields
print(f"Field f1:", a.f1)
print(f"Field f2:", a.f2)
#+end_src

#+RESULTS:
#+begin_example
Value:    MyRecord(f1=10, f2='abc')
Type:     <class '__main__.MyRecord'>
Field f1: 10
Field f2: abc
#+end_example


* Conclusions

- Powerful and easy to use data structure to create records
- Compared to tuples, records reduce errors
- code for this video at:
  http://github.com/dmgerman/f-python/namedtuples

  
